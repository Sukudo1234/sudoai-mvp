name: 'Terraform Infrastructure'

on:
  push:
    branches: [ main ]
    paths: 
      - 'infra/terraform/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'infra/terraform/**'
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  TF_VERSION: '1.5.0'
  AWS_REGION: ap-south-1

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        working-directory: ./infra/terraform

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        role-session-name: GitHubActions-TerraformSession
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Format Check
      id: fmt
      run: terraform fmt -check -recursive
      continue-on-error: true

    - name: Terraform Init
      id: init
      run: |
        terraform init \
          -backend-config="bucket=${{ vars.TF_STATE_BUCKET }}" \
          -backend-config="key=${{ vars.TF_STATE_KEY || 'sudoai-mvp/terraform.tfstate' }}" \
          -backend-config="region=${{ env.AWS_REGION }}"

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'plan')
      run: |
        terraform plan -no-color -input=false \
          -var="aws_region=${{ env.AWS_REGION }}" \
          -var="github_org=${{ github.repository_owner }}" \
          -var="github_repo=${{ github.event.repository.name }}" \
          -out=tfplan
      continue-on-error: true

    - name: Update Pull Request
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

    - name: Terraform Apply
      if: (github.ref == 'refs/heads/main' && github.event_name == 'push') || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
      run: |
        terraform apply -auto-approve -input=false \
          -var="aws_region=${{ env.AWS_REGION }}" \
          -var="github_org=${{ github.repository_owner }}" \
          -var="github_repo=${{ github.event.repository.name }}"

    - name: Terraform Destroy
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
      run: |
        terraform destroy -auto-approve -input=false \
          -var="aws_region=${{ env.AWS_REGION }}" \
          -var="github_org=${{ github.repository_owner }}" \
          -var="github_repo=${{ github.event.repository.name }}"

    - name: Output Infrastructure URLs
      if: (github.ref == 'refs/heads/main' && github.event_name == 'push') || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
      run: |
        echo "## üöÄ Infrastructure Deployed Successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Resource Information:" >> $GITHUB_STEP_SUMMARY
        echo "- **AWS Region**: ${{ env.AWS_REGION }}" >> $GITHUB_STEP_SUMMARY
        echo "- **S3 Raw Bucket**: \`$(terraform output -raw s3_raw_bucket_name)\`" >> $GITHUB_STEP_SUMMARY
        echo "- **S3 Output Bucket**: \`$(terraform output -raw s3_out_bucket_name)\`" >> $GITHUB_STEP_SUMMARY
        echo "- **CloudFront Domain**: \`$(terraform output -raw cloudfront_domain)\`" >> $GITHUB_STEP_SUMMARY
        echo "- **SQS Queue**: \`$(terraform output -raw sqs_queue_url)\`" >> $GITHUB_STEP_SUMMARY
        echo "- **ECR Repository**: \`$(terraform output -raw ecr_repository_url)\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY  
        echo "1. Configure application environment variables using the Terraform outputs" >> $GITHUB_STEP_SUMMARY
        echo "2. Build and push worker container images to ECR" >> $GITHUB_STEP_SUMMARY
        echo "3. Deploy the application using the configured infrastructure" >> $GITHUB_STEP_SUMMARY
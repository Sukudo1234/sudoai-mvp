name: 'Integration Tests'

on:
  schedule:
    # Run integration tests every hour during business hours
    - cron: '0 9-17 * * 1-5'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to test'
        required: true
        default: 'prod'
        type: choice
        options:
          - dev
          - staging  
          - prod

env:
  AWS_REGION: ap-south-1

permissions:
  id-token: write
  contents: read

jobs:
  integration-tests:
    name: 'Integration Tests'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        role-session-name: GitHubActions-IntegrationTests
        aws-region: ${{ env.AWS_REGION }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install test dependencies
      run: |
        pip install pytest requests boto3 python-dotenv

    - name: Run S3 Upload Tests
      run: |
        python -c "
        import boto3
        import requests
        from datetime import datetime
        
        # Test S3 multipart upload functionality
        s3 = boto3.client('s3')
        
        # Test presigned URL generation
        bucket = '${{ vars.S3_RAW_BUCKET || 'sudoai-mvp-prod-raw' }}'
        key = f'test-uploads/{datetime.now().isoformat()}/test-file.txt'
        
        try:
            presigned = s3.generate_presigned_url(
                'put_object',
                Params={'Bucket': bucket, 'Key': key},
                ExpiresIn=3600
            )
            print('✅ S3 presigned URL generation: PASS')
        except Exception as e:
            print(f'❌ S3 presigned URL generation: FAIL - {e}')
            raise
        "

    - name: Run SQS Tests
      run: |
        python -c "
        import boto3
        import json
        from datetime import datetime
        
        # Test SQS job queuing
        sqs = boto3.client('sqs')
        queue_url = '${{ vars.SQS_QUEUE_URL }}'
        
        if not queue_url:
            print('⚠️  SQS_QUEUE_URL not configured, skipping SQS tests')
        else:
            try:
                # Send test message
                response = sqs.send_message(
                    QueueUrl=queue_url,
                    MessageBody=json.dumps({
                        'job_id': f'test-{datetime.now().isoformat()}',
                        'task_type': 'test',
                        'test': True
                    })
                )
                print('✅ SQS message sending: PASS')
                
                # Clean up test message
                sqs.delete_message(
                    QueueUrl=queue_url,
                    ReceiptHandle=response.get('MD5OfBody', '')
                )
            except Exception as e:
                print(f'❌ SQS functionality: FAIL - {e}')
                raise
        "

    - name: Run Batch Tests
      run: |
        python -c "
        import boto3
        
        # Test Batch job submission (dry run)
        batch = boto3.client('batch')
        
        try:
            # Test CPU queue
            cpu_jobs = batch.list_jobs(jobQueue='${{ vars.BATCH_CPU_QUEUE || 'sudoai-mvp-prod-cpu-queue' }}')
            print(f'✅ Batch CPU queue status: {len(cpu_jobs.get(\"jobSummary\", []))} jobs')
            
            # Test GPU queue
            gpu_jobs = batch.list_jobs(jobQueue='${{ vars.BATCH_GPU_QUEUE || 'sudoai-mvp-prod-gpu-queue' }}')
            print(f'✅ Batch GPU queue status: {len(gpu_jobs.get(\"jobSummary\", []))} jobs')
            
        except Exception as e:
            print(f'❌ Batch queues: FAIL - {e}')
            raise
        "

    - name: Run Database Tests
      run: |
        python -c "
        import boto3
        
        # Test RDS connectivity (basic health check)
        rds = boto3.client('rds')
        
        try:
            clusters = rds.describe_db_clusters(
                DBClusterIdentifier='${{ vars.DB_CLUSTER || 'sudoai-mvp-prod-cluster' }}'
            )
            
            cluster = clusters['DBClusters'][0]
            status = cluster['Status']
            
            if status == 'available':
                print('✅ Database cluster: PASS - Available')
            else:
                print(f'⚠️  Database cluster: {status}')
                
        except Exception as e:
            print(f'❌ Database connectivity: FAIL - {e}')
            raise
        "

    - name: Run API Health Check
      run: |
        python -c "
        import requests
        import time
        
        # Test API health endpoint
        api_url = '${{ vars.API_URL }}'
        
        if not api_url:
            print('⚠️  API_URL not configured, skipping API tests')
        else:
            try:
                response = requests.get(f'{api_url}/health', timeout=30)
                response.raise_for_status()
                
                health_data = response.json()
                if health_data.get('ok'):
                    print('✅ API health check: PASS')
                else:
                    print(f'❌ API health check: FAIL - {health_data}')
                    
            except Exception as e:
                print(f'❌ API connectivity: FAIL - {e}')
                raise
        "

    - name: Test Summary
      run: |
        echo "## 🧪 Integration Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Test Environment: ${{ github.event.inputs.environment || 'prod' }}" >> $GITHUB_STEP_SUMMARY
        echo "### Test Time: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "All integration tests completed successfully! 🎉" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Components Tested:" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ S3 multipart upload functionality" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ SQS job queuing system" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ AWS Batch compute environments" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ RDS database connectivity" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ API health and availability" >> $GITHUB_STEP_SUMMARY